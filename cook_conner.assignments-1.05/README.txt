1.01 Create a map for the Pokemon game. The map size is 80 wide and 21 tall. There are exits on each cardinal direction edge (N, S, E, W). The map is randomized to consists of different regions, clearings and tall grass. The border edges are immovable boulders. The different characters are represent as follows, '%' is a boulder, ':' is tall grass, '.' is a clearing, '*' is desert, '#' is a path, '^' is tree and '-' is a rock. There are 5 style of regions clearings, tall grass, a mixture of the two, and desert. There are four different combinations of maps that can be generated which are: 2 clearings, 2 tall grass, 0 desert, and 1 mixed, 2 clearings, 2 tall grass, 0 desert, and 2 mixed, 2 clearings, 2 tall grass, 1 desert, and 1 mixed, and 2 clearings, 2 tall grass, 1 desert, and 2 mixed. This creates up to 7 different possible regions to spawn in a given map.


1.02 Can now traverse through different maps by typing e, w, n, s, or f x y. The overall size of the map is 399 by 399. Each containing its own unique map that lines up its exits with the corresponding exit of adjacent maps. Furthermore, the spawn rate of poke centers and marts now is based on a probability lowering as one moves away from the center of the map. Additionally, centers and marts now spawn more randomly within a given map terrain. When on the edge of the overall map, exits will not spawn going out of bounds. Lastly, one can not move the map position out of legal bounds. If w is entered when on the west edge of the map, map does not change and reprints the current map. Flying must be put in the format f, 1, 1 to fly to (1,1)


1.03 Now features distance cost map for two trainers, hikers and rivals. Currently, prints both distance maps before the current map. Still can move around in the overall world using the same controls as specified above. The heap is credited to the professor. I had attempted to crate my own heap; however after running into too many walls and the due date approaching, I resorted to using the professor's code. Slight, edits were made to the heap.c and heap.h files to give access to different fields of a the heap_node. No major changes were made only moved heap_node from being declared in the .c file to the .h file. Distance were all %100 to return down to 2 digits; therefore, the distance values will print 00 again once they have reached a multiple of 100. The exit paths on the edge of the map were left available to rivals and hikers, but all boulder edges were restricted. All trees were made impassible. Rocks have the highest cost to move through.

1.04 New update now features movement of NPC. Each NPC has a turn based on their movement cost. Each NPC has unique movement, rivals (r) and hikers (h) head straight for the player. Pacers (p) will move back and forth in a single direction turning around once they hit something they cannot move through. This includes characters, so if a pacer hits a character they will turn around instead of waiting for that character to move. Wanders (w) will try their best to stay in their starting terrain. Some wanders will be able move accross both clearings and tall grass if they were spawned in a mixed location. They will not cross rocks, paths, or any impassable terrain. Rand walkers (n) will move around randomly, they can also step into any territory that is passable (cannot pass trees, boulders, exits, and structures). After each movement, they will pick a new direction to go or pick the same direction. There is nothing stopping a random walker from going left, right, left, right etc, so they could have some weird movements. The player character will always spawn somewhere on a road and choose its movement as staying put. To specify a certain number of trainers to spawn, you can add the switch --numtrainers followed by an integer representing the number of characters to spawn. To be clear after running the make commands below, instead of ./run you could do ./run --numtrainers # to set number of characters equal to # where # is an integer. It is assumed the user enters an integer and the function atoi does not fail. As their is no check if atoi fails as the user could have also desired 0 characters to spawn and on a fail atoi also returns 0 on a fail.


1.05: Now updated to allow the user to control the pc. They can move around the map like other characters, but they can also move onto buildings. Players can initiate a battle by trying to walk into a trainer, or by letting a trainer walk into them. One can get a list of all the trainers on the map by pressing t. If the list seems full, you can press the up and down arrow keys to shift to trainers being listed. Waiting on a building does not cause time to pass as to not allow the user to wait until global time constraints that might be implemented in the future. You can also move between overall map areas by walking onto an exit (side areas of the map indicated with #). All controls are implanted as per the assignment details.

To compile and run the code. Enter the following commands
make all
make link
./run
This should accurately build and link all files necessary for running the program into a run.exe file for execution.
